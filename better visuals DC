import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from matplotlib.animation import FuncAnimation
from matplotlib.patches import Circle, Rectangle
from matplotlib.collections import PatchCollection
import matplotlib.colors as mcolors
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from matplotlib.transforms import Affine2D
import mpl_toolkits.mplot3d.art3d as art3d

class DCMachineSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("Enhanced DC Motor/Generator Visualizer")
        self.root.geometry("1200x900")
        
        # Style configuration
        self.style = ttk.Style()
        self.style.configure('TFrame', background='#f0f0f0')
        self.style.configure('TLabel', background='#f0f0f0', font=('Helvetica', 10))
        self.style.configure('TButton', font=('Helvetica', 10), padding=5)
        self.style.configure('TCombobox', padding=5)
        self.style.configure('Title.TLabel', font=('Helvetica', 12, 'bold'))
        
        # Constants
        self.pole_pairs = 2
        self.conductors = 100
        self.armature_length = 0.3  # meters
        self.radius = 0.1  # meters
        self.commutator_segments = 16
        
        # Variables
        self.flux_density = tk.DoubleVar(value=0.5)  # Tesla
        self.speed = tk.DoubleVar(value=10)  # rad/s
        self.armature_current = tk.DoubleVar(value=2.0)  # Amps
        self.mode = tk.StringVar(value="generator")  # or "motor"
        self.show_field = tk.BooleanVar(value=True)
        self.show_vectors = tk.BooleanVar(value=True)
        self.show_commutator = tk.BooleanVar(value=True)
        
        # Setup UI
        self.setup_ui()
        
        # Animation
        self.animation = None
        self.setup_animation()
        
    def setup_ui(self):
        # Create main frames
        control_frame = ttk.LabelFrame(self.root, text="Controls", padding=15)
        control_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        visualization_frame = ttk.LabelFrame(self.root, text="3D Visualization", padding=10)
        visualization_frame.grid(row=0, column=1, rowspan=2, padx=10, pady=10, sticky="nsew")
        
        graph_frame = ttk.LabelFrame(self.root, text="Performance Graphs", padding=10)
        graph_frame.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
        
        # Configure grid weights
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=2)
        self.root.grid_rowconfigure(0, weight=2)
        self.root.grid_rowconfigure(1, weight=1)
        
        # Control widgets
        ttk.Label(control_frame, text="Machine Mode:", style='Title.TLabel').grid(row=0, column=0, sticky="w", pady=(0, 10))
        mode_combobox = ttk.Combobox(control_frame, textvariable=self.mode, 
                                    values=["generator", "motor"], state="readonly")
        mode_combobox.grid(row=0, column=1, sticky="ew", pady=(0, 10))
        mode_combobox.bind("<<ComboboxSelected>>", self.update_mode)
        
        # Parameters frame
        params_frame = ttk.LabelFrame(control_frame, text="Parameters", padding=10)
        params_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=5)
        
        ttk.Label(params_frame, text="Flux Density (T):").grid(row=0, column=0, sticky="w")
        ttk.Scale(params_frame, from_=0.1, to=1.5, variable=self.flux_density, 
                  command=self.update_parameters).grid(row=0, column=1, sticky="ew")
        ttk.Label(params_frame, textvariable=self.flux_density).grid(row=0, column=2)
        
        ttk.Label(params_frame, text="Speed (rad/s):").grid(row=1, column=0, sticky="w")
        ttk.Scale(params_frame, from_=1, to=50, variable=self.speed, 
                  command=self.update_parameters).grid(row=1, column=1, sticky="ew")
        ttk.Label(params_frame, textvariable=self.speed).grid(row=1, column=2)
        
        ttk.Label(params_frame, text="Current (A):").grid(row=2, column=0, sticky="w")
        ttk.Scale(params_frame, from_=0.1, to=10, variable=self.armature_current, 
                  command=self.update_parameters).grid(row=2, column=1, sticky="ew")
        ttk.Label(params_frame, textvariable=self.armature_current).grid(row=2, column=2)
        
        # Visualization options
        options_frame = ttk.LabelFrame(control_frame, text="Visualization Options", padding=10)
        options_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=5)
        
        ttk.Checkbutton(options_frame, text="Show Magnetic Field", variable=self.show_field, 
                       command=self.update_visualization).grid(row=0, column=0, sticky="w")
        ttk.Checkbutton(options_frame, text="Show Force Vectors", variable=self.show_vectors, 
                       command=self.update_visualization).grid(row=1, column=0, sticky="w")
        ttk.Checkbutton(options_frame, text="Show Commutator", variable=self.show_commutator, 
                       command=self.update_visualization).grid(row=0, column=1, sticky="w")
        
        # Equations display
        self.equation_frame = ttk.LabelFrame(control_frame, text="Machine Equations", padding=10)
        self.equation_frame.grid(row=3, column=0, columnspan=2, sticky="nsew", pady=5)
        
        self.equation_label = ttk.Label(self.equation_frame, text="", font=('Consolas', 10), wraplength=300)
        self.equation_label.pack(fill=tk.BOTH, expand=True)
        
        # Performance metrics
        self.metrics_frame = ttk.LabelFrame(control_frame, text="Performance Metrics", padding=10)
        self.metrics_frame.grid(row=4, column=0, columnspan=2, sticky="nsew", pady=5)
        
        self.metrics_label = ttk.Label(self.metrics_frame, text="", font=('Consolas', 10))
        self.metrics_label.pack(fill=tk.BOTH, expand=True)
        
        # Visualization canvas
        self.figure = Figure(figsize=(8, 8), dpi=100, facecolor='#f5f5f5')
        self.ax = self.figure.add_subplot(111, projection='3d')
        self.ax.set_facecolor('#f5f5f5')
        self.canvas = FigureCanvasTkAgg(self.figure, master=visualization_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Graph canvas
        self.graph_figure = Figure(figsize=(8, 4), dpi=100, facecolor='#f5f5f5')
        self.graph_ax1 = self.graph_figure.add_subplot(121)
        self.graph_ax2 = self.graph_figure.add_subplot(122)
        for ax in [self.graph_ax1, self.graph_ax2]:
            ax.set_facecolor('#f5f5f5')
            ax.grid(True, linestyle='--', alpha=0.6)
        self.graph_canvas = FigureCanvasTkAgg(self.graph_figure, master=graph_frame)
        self.graph_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Initial update
        self.update_parameters()
        self.update_graphs()
        
    def setup_animation(self):
        # Clear previous animation if exists
        if self.animation:
            self.animation.event_source.stop()
        
        # Set up the animation
        def update_frame(frame):
            self.ax.clear()
            theta = frame * np.pi / 180
            self.draw_machine(theta)
            
        self.animation = FuncAnimation(self.figure, update_frame, frames=np.arange(0, 360, 2), 
                                     interval=50, blit=False)
        self.canvas.draw()
    
    def draw_machine(self, theta):
        # Clear and set up the axes
        self.ax.clear()
        self.ax.set_facecolor('#f5f5f5')
        
        # Set viewing angle for better perspective
        self.ax.view_init(elev=20, azim=theta*180/np.pi)
        
        # Draw the armature cylinder with a metallic look
        z = np.linspace(0, self.armature_length, 10)
        theta_cyl = np.linspace(0, 2*np.pi, 100)
        theta_grid, z_grid = np.meshgrid(theta_cyl, z)
        x_grid = self.radius * np.cos(theta_grid)
        y_grid = self.radius * np.sin(theta_grid)
        self.ax.plot_surface(x_grid, y_grid, z_grid, color='silver', alpha=0.7, 
                            edgecolor='gray', linewidth=0.5)
        
        # Draw poles with better visualization
        pole_colors = ['#FF3333', '#3333FF']  # Red for North, Blue for South
        for i in range(self.pole_pairs * 2):
            pole_theta = i * (2*np.pi / (self.pole_pairs * 2))
            pole_x = 1.5 * self.radius * np.cos(pole_theta)
            pole_y = 1.5 * self.radius * np.sin(pole_theta)
            pole_z = self.armature_length / 2
            
            # Draw 3D pole shape
            pole_width = 0.15
            pole_height = 0.2
            pole_depth = 0.05
            
            # Create pole vertices
            x = [pole_x, pole_x + pole_width*np.cos(pole_theta), 
                 pole_x + pole_width*np.cos(pole_theta) - pole_depth*np.sin(pole_theta),
                 pole_x - pole_depth*np.sin(pole_theta)]
            y = [pole_y, pole_y + pole_width*np.sin(pole_theta), 
                 pole_y + pole_width*np.sin(pole_theta) + pole_depth*np.cos(pole_theta),
                 pole_y + pole_depth*np.cos(pole_theta)]
            z_base = pole_z - pole_height/2
            z_top = pole_z + pole_height/2
            
            # Draw pole sides
            verts = [list(zip(x, y, [z_base]*4))]
            self.ax.add_collection3d(Poly3DCollection(verts, color=pole_colors[i%2], alpha=0.8))
            
            verts = [list(zip(x, y, [z_top]*4))]
            self.ax.add_collection3d(Poly3DCollection(verts, color=pole_colors[i%2], alpha=0.8))
            
            # Draw pole edges
            for j in range(4):
                self.ax.plot([x[j], x[j]], [y[j], y[j]], [z_base, z_top], 
                            color=pole_colors[i%2], linewidth=2)
            
            # Label poles
            self.ax.text(pole_x*1.5, pole_y*1.5, pole_z, 'N' if i % 2 == 0 else 'S', 
                        color=pole_colors[i%2], fontsize=12, fontweight='bold')
        
        # Draw magnetic field if enabled
        if self.show_field.get():
            field_strength = self.flux_density.get() * 5  # Scale for visualization
            for i in range(self.pole_pairs * 2):
                pole_theta = i * (2*np.pi / (self.pole_pairs * 2))
                field_dir = -1 if i % 2 == 0 else 1  # North pole field goes out, South comes in
                
                # Draw field lines
                for j in range(5):
                    line_theta = pole_theta + (j-2)*0.1
                    x_start = 1.3 * self.radius * np.cos(line_theta)
                    y_start = 1.3 * self.radius * np.sin(line_theta)
                    
                    # Create curved field lines
                    t = np.linspace(0, 1, 20)
                    curve_x = x_start + field_dir * field_strength * t * np.cos(line_theta + np.pi/2 * t)
                    curve_y = y_start + field_dir * field_strength * t * np.sin(line_theta + np.pi/2 * t)
                    curve_z = np.ones_like(t) * self.armature_length/2
                    
                    self.ax.plot(curve_x, curve_y, curve_z, 
                                color='#FF9900' if i % 2 == 0 else '#0099FF', 
                                alpha=0.6, linewidth=1.5)
        
        # Draw commutator if enabled
        if self.show_commutator.get():
            comm_radius = self.radius * 0.7
            comm_z = -0.05
            comm_height = 0.03
            
            # Draw commutator cylinder
            z_comm = np.linspace(comm_z, comm_z + comm_height, 5)
            theta_comm = np.linspace(0, 2*np.pi, 100)
            theta_comm_grid, z_comm_grid = np.meshgrid(theta_comm, z_comm)
            x_comm_grid = comm_radius * np.cos(theta_comm_grid)
            y_comm_grid = comm_radius * np.sin(theta_comm_grid)
            self.ax.plot_surface(x_comm_grid, y_comm_grid, z_comm_grid, 
                                color='gold', alpha=0.8, edgecolor='darkgoldenrod')
            
            # Draw commutator segments
            for i in range(self.commutator_segments):
                segment_theta = theta + i * (2*np.pi / self.commutator_segments)
                segment_width = 2*np.pi / self.commutator_segments * 0.9
                
                # Draw segment
                theta_seg = np.linspace(segment_theta - segment_width/2, 
                                      segment_theta + segment_width/2, 10)
                x_seg = comm_radius * np.cos(theta_seg)
                y_seg = comm_radius * np.sin(theta_seg)
                z_seg = np.ones_like(theta_seg) * (comm_z + comm_height + 0.001)
                
                self.ax.plot(x_seg, y_seg, z_seg, color='darkgoldenrod', linewidth=2)
                
                # Draw brush contact
                if abs(theta_seg[5] % (2*np.pi/self.pole_pairs)) < 0.2:
                    brush_x = (comm_radius + 0.02) * np.cos(theta_seg[5])
                    brush_y = (comm_radius + 0.02) * np.sin(theta_seg[5])
                    brush_z = comm_z + comm_height/2
                    
                    self.ax.plot([brush_x, brush_x*1.3], [brush_y, brush_y*1.3], 
                                [brush_z, brush_z], color='black', linewidth=3)
        
        # Draw conductors with current flow visualization
        for i in range(8):  # Draw representative conductors
            cond_theta = theta + i * (2*np.pi / 8)
            x_start = self.radius * np.cos(cond_theta)
            y_start = self.radius * np.sin(cond_theta)
            x_end = self.radius * np.cos(cond_theta + np.pi)
            y_end = self.radius * np.sin(cond_theta + np.pi)
            
            # Draw conductor with current-dependent color
            current_strength = min(1.0, abs(self.armature_current.get()) / 5.0)
            current_color = plt.cm.RdYlBu_r(current_strength) if self.mode.get() == "motor" else plt.cm.RdYlBu(1-current_strength)
            
            self.ax.plot([x_start, x_end], [y_start, y_end], [0, self.armature_length], 
                         color=current_color, linewidth=2, alpha=0.8)
            
            # Draw current direction indicators
            if self.show_vectors.get():
                arrow_scale = 0.1
                if self.mode.get() == "generator":
                    # Generator mode - show EMF direction
                    emf_dir = np.array([y_start, -x_start, 0])  # Fleming's right hand rule
                    emf_dir = emf_dir / np.linalg.norm(emf_dir) * arrow_scale
                    
                    # Draw EMF arrow
                    self.ax.quiver(x_start, y_start, self.armature_length/2, 
                                  emf_dir[0], emf_dir[1], emf_dir[2], 
                                  color='purple', arrow_length_ratio=0.3, linewidth=2)
                    
                    # Draw velocity arrow (tangential)
                    v_dir = np.array([-y_start, x_start, 0])
                    v_dir = v_dir / np.linalg.norm(v_dir) * arrow_scale
                    self.ax.quiver(x_start, y_start, self.armature_length/2, 
                                  v_dir[0], v_dir[1], v_dir[2], 
                                  color='green', arrow_length_ratio=0.3, linewidth=2)
                else:
                    # Motor mode - show force direction
                    force_dir = np.array([y_start, -x_start, 0])  # Fleming's left hand rule
                    force_dir = force_dir / np.linalg.norm(force_dir) * arrow_scale
                    
                    # Draw force arrow
                    self.ax.quiver(x_start, y_start, self.armature_length/2, 
                                  force_dir[0], force_dir[1], force_dir[2], 
                                  color='red', arrow_length_ratio=0.3, linewidth=2)
                    
                    # Draw current arrow (tangential)
                    current_dir = np.array([-y_start, x_start, 0])
                    current_dir = current_dir / np.linalg.norm(current_dir) * arrow_scale
                    self.ax.quiver(x_start, y_start, self.armature_length/2, 
                                  current_dir[0], current_dir[1], current_dir[2], 
                                  color='blue', arrow_length_ratio=0.3, linewidth=2)
        
        # Draw shaft
        shaft_radius = self.radius * 0.2
        z_shaft = np.linspace(-0.1, self.armature_length + 0.1, 10)
        theta_shaft = np.linspace(0, 2*np.pi, 50)
        theta_shaft_grid, z_shaft_grid = np.meshgrid(theta_shaft, z_shaft)
        x_shaft_grid = shaft_radius * np.cos(theta_shaft_grid)
        y_shaft_grid = shaft_radius * np.sin(theta_shaft_grid)
        self.ax.plot_surface(x_shaft_grid, y_shaft_grid, z_shaft_grid, 
                            color='gray', alpha=0.9, edgecolor='black')
        
        # Set view and labels
        self.ax.set_xlim([-0.4, 0.4])
        self.ax.set_ylim([-0.4, 0.4])
        self.ax.set_zlim([-0.1, self.armature_length + 0.1])
        self.ax.set_title(f"DC {self.mode.get().capitalize()} Visualization", fontsize=12, pad=20)
        self.ax.set_axis_off()  # Turn off axes for cleaner look
        
        # Add legend
        if self.mode.get() == "generator":
            legend_elements = [
                plt.Line2D([0], [0], color='green', lw=2, label='Velocity'),
                plt.Line2D([0], [0], color='purple', lw=2, label='EMF'),
                plt.Line2D([0], [0], color='#FF3333', lw=2, label='North Pole'),
                plt.Line2D([0], [0], color='#3333FF', lw=2, label='South Pole')
            ]
        else:
            legend_elements = [
                plt.Line2D([0], [0], color='blue', lw=2, label='Current'),
                plt.Line2D([0], [0], color='red', lw=2, label='Force'),
                plt.Line2D([0], [0], color='#FF3333', lw=2, label='North Pole'),
                plt.Line2D([0], [0], color='#3333FF', lw=2, label='South Pole')
            ]
        
        self.ax.legend(handles=legend_elements, loc='upper right', bbox_to_anchor=(1.1, 0.9))
        
    def update_parameters(self, *args):
        # Update equations display
        if self.mode.get() == "generator":
            emf = self.calculate_emf()
            power = emf * self.armature_current.get()
            equation_text = (f"Generator Mode\n\n"
                           f"EMF = B × l × v × N\n"
                           f"    = {self.flux_density.get():.2f} T × {self.armature_length:.2f} m × "
                           f"({self.speed.get():.2f} rad/s × {self.radius:.2f} m) × {self.conductors}\n"
                           f"    = {emf:.2f} V\n\n"
                           f"Power = EMF × I = {emf:.2f} V × {self.armature_current.get():.2f} A\n"
                           f"      = {power:.2f} W")
            
            metrics_text = (f"Operating Parameters:\n"
                          f"Speed: {self.speed.get():.2f} rad/s\n"
                          f"Flux Density: {self.flux_density.get():.2f} T\n"
                          f"Load Current: {self.armature_current.get():.2f} A\n"
                          f"Generated EMF: {emf:.2f} V\n"
                          f"Output Power: {power:.2f} W")
        else:
            torque = self.calculate_torque()
            power = torque * self.speed.get()
            equation_text = (f"Motor Mode\n\n"
                           f"Torque = B × l × I × N × r\n"
                           f"       = {self.flux_density.get():.2f} T × {self.armature_length:.2f} m × "
                           f"{self.armature_current.get():.2f} A × {self.conductors} × {self.radius:.2f} m\n"
                           f"       = {torque:.2f} N·m\n\n"
                           f"Power = Torque × ω = {torque:.2f} N·m × {self.speed.get():.2f} rad/s\n"
                           f"      = {power:.2f} W")
            
            metrics_text = (f"Operating Parameters:\n"
                          f"Speed: {self.speed.get():.2f} rad/s\n"
                          f"Flux Density: {self.flux_density.get():.2f} T\n"
                          f"Armature Current: {self.armature_current.get():.2f} A\n"
                          f"Developed Torque: {torque:.2f} N·m\n"
                          f"Mechanical Power: {power:.2f} W")
        
        self.equation_label.config(text=equation_text)
        self.metrics_label.config(text=metrics_text)
        self.update_graphs()
        
    def update_mode(self, *args):
        self.update_parameters()
        self.setup_animation()
        
    def update_visualization(self):
        self.setup_animation()
        
    def calculate_emf(self):
        # EMF = B * l * v * N
        # where v = ω * r (tangential velocity)
        return (self.flux_density.get() * self.armature_length * 
                (self.speed.get() * self.radius) * self.conductors)
    
    def calculate_torque(self):
        # Torque = B * l * I * N * r
        return (self.flux_density.get() * self.armature_length * 
                self.armature_current.get() * self.conductors * self.radius)
    
    def update_graphs(self):
        # Clear previous graphs
        self.graph_ax1.clear()
        self.graph_ax2.clear()
        
        # Generate data for graphs
        speeds = np.linspace(1, 50, 100)
        emfs = (self.flux_density.get() * self.armature_length * 
               (speeds * self.radius) * self.conductors)
        
        currents = np.linspace(0.1, 10, 100)
        torques = (self.flux_density.get() * self.armature_length * 
                  currents * self.conductors * self.radius)
        
        # Plot EMF vs Speed
        self.graph_ax1.plot(speeds, emfs, label='EMF vs Speed', color='#4C72B0', linewidth=2)
        self.graph_ax1.set_xlabel('Speed (rad/s)', fontsize=10)
        self.graph_ax1.set_ylabel('EMF (V)', fontsize=10)
        self.graph_ax1.set_title('Generator Characteristic', fontsize=11, pad=10)
        
        # Highlight current operating point
        current_emf = self.calculate_emf()
        self.graph_ax1.axvline(x=self.speed.get(), color='r', linestyle='--', alpha=0.7)
        self.graph_ax1.axhline(y=current_emf, color='r', linestyle='--', alpha=0.7)
        self.graph_ax1.plot(self.speed.get(), current_emf, 'ro', markersize=8)
        self.graph_ax1.annotate(f'({self.speed.get():.1f}, {current_emf:.1f})', 
                              xy=(self.speed.get(), current_emf),
                              xytext=(10, 10), textcoords='offset points',
                              bbox=dict(boxstyle='round,pad=0.5', fc='white', alpha=0.7))
        
        self.graph_ax1.grid(True, linestyle='--', alpha=0.6)
        self.graph_ax1.legend(fontsize=9)
        
        # Plot Torque vs Current
        self.graph_ax2.plot(currents, torques, label='Torque vs Current', color='#55A868', linewidth=2)
        self.graph_ax2.set_xlabel('Current (A)', fontsize=10)
        self.graph_ax2.set_ylabel('Torque (N·m)', fontsize=10)
        self.graph_ax2.set_title('Motor Characteristic', fontsize=11, pad=10)
        
        # Highlight current operating point
        current_torque = self.calculate_torque()
        self.graph_ax2.axvline(x=self.armature_current.get(), color='r', linestyle='--', alpha=0.7)
        self.graph_ax2.axhline(y=current_torque, color='r', linestyle='--', alpha=0.7)
        self.graph_ax2.plot(self.armature_current.get(), current_torque, 'ro', markersize=8)
        self.graph_ax2.annotate(f'({self.armature_current.get():.1f}, {current_torque:.1f})', 
                              xy=(self.armature_current.get(), current_torque),
                              xytext=(10, 10), textcoords='offset points',
                              bbox=dict(boxstyle='round,pad=0.5', fc='white', alpha=0.7))
        
        self.graph_ax2.grid(True, linestyle='--', alpha=0.6)
        self.graph_ax2.legend(fontsize=9)
        
        # Adjust layout
        self.graph_figure.tight_layout()
        self.graph_canvas.draw()

if __name__ == "__main__":
    root = tk.Tk()
    app = DCMachineSimulator(root)
    root.mainloop()
